<Type Name="BidirectionalEmbedding" FullName="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding">
  <TypeSignature Language="C#" Value="public class BidirectionalEmbedding : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BidirectionalEmbedding extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" />
  <TypeSignature Language="VB.NET" Value="Public Class BidirectionalEmbedding&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type BidirectionalEmbedding = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
    <AssemblyVersion>2.14.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[DocumentFormat.OpenXml.SchemaAttr(23, "dir")]</AttributeName>
      <AttributeName Language="F#">[&lt;DocumentFormat.OpenXml.SchemaAttr(23, "dir")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Defines the BidirectionalEmbedding Class.</para>
      <para>This class is available in Office 2010 and above.</para>
      <para>When the object is serialized out as xml, it's qualified name is w:dir.</para>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlnoticeiso.md)] 
  
 **dir (Bidirectional Embedding Level)**  
  
 This element specifies that the embedding level of its contents shall be increased, as described by the Bidirectional Algorithm (cf. Unicode Technical Report #9). Unlike the rtl element (§17.3.2.30), this element can be nested and causes the embedding level to increase appropriately. Within this element, the semantics for the rtl element shall continue apply, specifying a high-level override of the character classification applied at the appropriate embedding level. [*Note*: The presence of this markup is functionally equivalent to the presence of a LRE/RLE character at the location of the start element, and a corresponding PDF character at the location of the end element in a string of Unicode text. *end note*]  
  
 [*Example*: Consider a left-to-right paragraph that has a quote in a right-to-left language, but the quote itself includes left-to-right text. In this case, the text layout within the quote should be read from right-to-left. Adding this element around the quote increases the embedding level and result in the desired layout. (Assume the lower-case text is English and the upper-case text is Arabic or Hebrew):  
  
```xml  
<w:r>  
    <w:t>he said: “</w:t>  
</w:r>  
<w:dir w:val=”rtl”>  
    <w:r>  
        <w:rPr>  
            <w:rtl />  
        </w:rPr>  
        <w:t>I LEAVE FOR </w:t>  
    </w:r>  
    <w:r>  
        <w:t>united states</w:t>  
    </w:r>  
    <w:r>  
        <w:rPr>  
            <w:rtl />  
        </w:rPr>  
        <w:t xml:space="preserve"> TOMORROW</w:t>  
    </w:r>  
</w:dir>  
<w:r>  
    <w:t>”.</w:t>  
</w:r>  
```  
  
 The alternating RTL and  elements help in resolving the classification of characters within this run as follows:  
  
```xml  
he said: “I LEAVE FOR united states TOMORROW”.  
LLLLLLLLLLRRRRRRRRRRRRLLLLLLLLLLLLLRRRRRRRRRLL  
```  
  
 But the fact that the quote is enclosed in an RTL embedding; the following embedding levels are generated:  
  
```xml  
he said: “I LEAVE FOR united states TOMORROW”.  
0000000000111111111111222222222222211111111100  
```  
  
 This generates the following text layout:  
  
```xml  
he said: “WORROMOT united states ROF EVAEL I”.  
```  
  
 *end example*]  
  
|Parent Elements|  
|---------------------|  
|bdo (§17.3.2.3); customXml (§17.5.1.3); del (§17.13.5.14); dir (§17.3.2.8); fldSimple (§17.16.19); hyperlink (§17.16.22); ins (§17.13.5.18); moveFrom (§17.13.5.22); moveTo (§17.13.5.25); p (§17.3.1.22); sdtContent (§17.5.2.36); smartTag (§17.5.1.9)|  
  
|Child Elements|Subclause|  
|--------------------|---------------|  
|bdo (Bidirectional Override)|§17.3.2.3|  
|bookmarkEnd (Bookmark End)|§17.13.6.1|  
|bookmarkStart (Bookmark Start)|§17.13.6.2|  
|commentRangeEnd (Comment Anchor Range End)|§17.13.4.3|  
|commentRangeStart (Comment Anchor Range Start)|§17.13.4.4|  
|customXml (Inline-Level Custom XML Element)|§17.5.1.3|  
|customXmlDelRangeEnd (Custom XML Markup Deletion End)|§17.13.5.4|  
|customXmlDelRangeStart (Custom XML Markup Deletion Start)|§17.13.5.5|  
|customXmlInsRangeEnd (Custom XML Markup Insertion End)|§17.13.5.6|  
|customXmlInsRangeStart (Custom XML Markup Insertion Start)|§17.13.5.7|  
|customXmlMoveFromRangeEnd (Custom XML Markup Move Source End)|§17.13.5.8|  
|customXmlMoveFromRangeStart (Custom XML Markup Move Source Start)|§17.13.5.9|  
|customXmlMoveToRangeEnd (Custom XML Markup Move Destination Location End)|§17.13.5.10|  
|customXmlMoveToRangeStart (Custom XML Markup Move Destination Location Start)|§17.13.5.11|  
|del (Deleted Run Content)|§17.13.5.14|  
|dir (Bidirectional Embedding Level)|§17.3.2.8|  
|fldSimple (Simple Field)|§17.16.19|  
|hyperlink (Hyperlink)|§17.16.22|  
|ins (Inserted Run Content)|§17.13.5.18|  
|moveFrom (Move Source Run Content)|§17.13.5.22|  
|moveFromRangeEnd (Move Source Location Container - End)|§17.13.5.23|  
|moveFromRangeStart (Move Source Location Container - Start)|§17.13.5.24|  
|moveTo (Move Destination Run Content)|§17.13.5.25|  
|moveToRangeEnd (Move Destination Location Container - End)|§17.13.5.27|  
|moveToRangeStart (Move Destination Location Container - Start)|§17.13.5.28|  
|oMath (Office Math)|§22.1.2.77|  
|oMathPara (Office Math Paragraph)|§22.1.2.78|  
|permEnd (Range Permission End)|§17.13.7.1|  
|permStart (Range Permission Start)|§17.13.7.2|  
|proofErr (Proofing Error Anchor)|§17.13.8.1|  
|r (Text Run)|§17.3.2.25|  
|sdt (Inline-Level Structured Document Tag)|§17.5.2.31|  
|smartTag (Inline-Level Smart Tag)|§17.5.1.9|  
|subDoc (Anchor for Subdocument Location)|§17.17.1.1|  
  
  [*Note*: The W3C XML Schema definition of this element’s content model (CT_DirContentRun) is located in §A.1. *end note*]  
  
 [!INCLUDE[openxmlnoticeiso](~/includes/openxmlcopyrightiso.md)]  
  
 ]]></format>
    </remarks>
    <remark>
      <para>The following table lists the possible child types:</para>
      <list type="bullet">
        <item>
          <description>CustomXmlRun &lt;w:customXml&gt;</description>
        </item>
        <item>
          <description>SimpleField &lt;w:fldSimple&gt;</description>
        </item>
        <item>
          <description>Hyperlink &lt;w:hyperlink&gt;</description>
        </item>
        <item>
          <description>SdtRun &lt;w:sdt&gt;</description>
        </item>
        <item>
          <description>ProofError &lt;w:proofErr&gt;</description>
        </item>
        <item>
          <description>PermStart &lt;w:permStart&gt;</description>
        </item>
        <item>
          <description>PermEnd &lt;w:permEnd&gt;</description>
        </item>
        <item>
          <description>BookmarkStart &lt;w:bookmarkStart&gt;</description>
        </item>
        <item>
          <description>BookmarkEnd &lt;w:bookmarkEnd&gt;</description>
        </item>
        <item>
          <description>CommentRangeStart &lt;w:commentRangeStart&gt;</description>
        </item>
        <item>
          <description>CommentRangeEnd &lt;w:commentRangeEnd&gt;</description>
        </item>
        <item>
          <description>MoveFromRangeStart &lt;w:moveFromRangeStart&gt;</description>
        </item>
        <item>
          <description>MoveFromRangeEnd &lt;w:moveFromRangeEnd&gt;</description>
        </item>
        <item>
          <description>MoveToRangeStart &lt;w:moveToRangeStart&gt;</description>
        </item>
        <item>
          <description>MoveToRangeEnd &lt;w:moveToRangeEnd&gt;</description>
        </item>
        <item>
          <description>CustomXmlInsRangeStart &lt;w:customXmlInsRangeStart&gt;</description>
        </item>
        <item>
          <description>CustomXmlInsRangeEnd &lt;w:customXmlInsRangeEnd&gt;</description>
        </item>
        <item>
          <description>CustomXmlDelRangeStart &lt;w:customXmlDelRangeStart&gt;</description>
        </item>
        <item>
          <description>CustomXmlDelRangeEnd &lt;w:customXmlDelRangeEnd&gt;</description>
        </item>
        <item>
          <description>CustomXmlMoveFromRangeStart &lt;w:customXmlMoveFromRangeStart&gt;</description>
        </item>
        <item>
          <description>CustomXmlMoveFromRangeEnd &lt;w:customXmlMoveFromRangeEnd&gt;</description>
        </item>
        <item>
          <description>CustomXmlMoveToRangeStart &lt;w:customXmlMoveToRangeStart&gt;</description>
        </item>
        <item>
          <description>CustomXmlMoveToRangeEnd &lt;w:customXmlMoveToRangeEnd&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeStart &lt;w14:customXmlConflictInsRangeStart&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictInsertionRangeEnd &lt;w14:customXmlConflictInsRangeEnd&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeStart &lt;w14:customXmlConflictDelRangeStart&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Office2010.Word.CustomXmlConflictDeletionRangeEnd &lt;w14:customXmlConflictDelRangeEnd&gt;</description>
        </item>
        <item>
          <description>InsertedRun &lt;w:ins&gt;</description>
        </item>
        <item>
          <description>DeletedRun &lt;w:del&gt;</description>
        </item>
        <item>
          <description>MoveFromRun &lt;w:moveFrom&gt;</description>
        </item>
        <item>
          <description>MoveToRun &lt;w:moveTo&gt;</description>
        </item>
        <item>
          <description>ContentPart &lt;w:contentPart&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Office2010.Word.RunConflictInsertion &lt;w14:conflictIns&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Office2010.Word.RunConflictDeletion &lt;w14:conflictDel&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Paragraph &lt;m:oMathPara&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.OfficeMath &lt;m:oMath&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Accent &lt;m:acc&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Bar &lt;m:bar&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Box &lt;m:box&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.BorderBox &lt;m:borderBox&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Delimiter &lt;m:d&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.EquationArray &lt;m:eqArr&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Fraction &lt;m:f&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.MathFunction &lt;m:func&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.GroupChar &lt;m:groupChr&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.LimitLower &lt;m:limLow&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.LimitUpper &lt;m:limUpp&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Matrix &lt;m:m&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Nary &lt;m:nary&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Phantom &lt;m:phant&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Radical &lt;m:rad&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.PreSubSuper &lt;m:sPre&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Subscript &lt;m:sSub&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.SubSuperscript &lt;m:sSubSup&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Superscript &lt;m:sSup&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Math.Run &lt;m:r&gt;</description>
        </item>
        <item>
          <description>Run &lt;w:r&gt;</description>
        </item>
        <item>
          <description>BidirectionalOverride &lt;w:bdo&gt;</description>
        </item>
        <item>
          <description>BidirectionalEmbedding &lt;w:dir&gt;</description>
        </item>
        <item>
          <description>SubDocumentReference &lt;w:subDoc&gt;</description>
        </item>
      </list>
    </remark>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BidirectionalEmbedding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the BidirectionalEmbedding class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BidirectionalEmbedding (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" Usage="new DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>
            Initializes a new instance of the BidirectionalEmbedding class with the specified child elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BidirectionalEmbedding (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" Usage="new DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>
            Initializes a new instance of the BidirectionalEmbedding class with the specified child elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BidirectionalEmbedding (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding : string -&gt; DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding" Usage="new DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>
            Initializes a new instance of the BidirectionalEmbedding class from outer XML.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="bidirectionalEmbedding.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.DirectionValues&gt;? Val { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.EnumValue`1&lt;valuetype DocumentFormat.OpenXml.Wordprocessing.DirectionValues&gt; Val" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding.Val" />
      <MemberSignature Language="VB.NET" Value="Public Property Val As EnumValue(Of DirectionValues)" />
      <MemberSignature Language="F#" Value="member this.Val : DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.DirectionValues&gt; with get, set" Usage="DocumentFormat.OpenXml.Wordprocessing.BidirectionalEmbedding.Val" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[DocumentFormat.OpenXml.SchemaAttr(23, "val")]</AttributeName>
          <AttributeName Language="F#">[&lt;DocumentFormat.OpenXml.SchemaAttr(23, "val")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.EnumValue&lt;DocumentFormat.OpenXml.Wordprocessing.DirectionValues&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>val</para>
          <para>Represents the following attribute in the schema: w:val</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <remark>
            xmlns:w=http://schemas.openxmlformats.org/wordprocessingml/2006/main
            </remark>
      </Docs>
    </Member>
  </Members>
</Type>
