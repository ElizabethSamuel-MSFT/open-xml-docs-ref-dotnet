<Type Name="ConditionalFormatting" FullName="DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting">
  <TypeSignature Language="C#" Value="public class ConditionalFormatting : DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConditionalFormatting extends DocumentFormat.OpenXml.OpenXmlCompositeElement" />
  <TypeSignature Language="DocId" Value="T:DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting" />
  <TypeSignature Language="VB.NET" Value="Public Class ConditionalFormatting&#xA;Inherits OpenXmlCompositeElement" />
  <TypeSignature Language="F#" Value="type ConditionalFormatting = class&#xA;    inherit OpenXmlCompositeElement" />
  <AssemblyInfo>
    <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
    <AssemblyVersion>2.7.2.0</AssemblyVersion>
    <AssemblyVersion>2.8.1.0</AssemblyVersion>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
    <AssemblyVersion>2.14.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>DocumentFormat.OpenXml.OpenXmlCompositeElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[DocumentFormat.OpenXml.SchemaAttr(53, "conditionalFormatting")]</AttributeName>
      <AttributeName Language="F#">[&lt;DocumentFormat.OpenXml.SchemaAttr(53, "conditionalFormatting")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Defines the ConditionalFormatting Class.</para>
      <para>This class is available in Office 2010 and above.</para>
      <para>When the object is serialized out as xml, it's qualified name is x14:conditionalFormatting.</para>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *2.6.2   CT_ConditionalFormatting*  
  
 *Target namespace:* http://schemas.microsoft.com/office/spreadsheetml/2009/9/main  
  
 *Referenced by:* CT_ConditionalFormattings  
  
 The *CT_ConditionalFormatting* complex type specifies conditional formatting properties for a range.  
  
 *Child Elements:*  
  
 *cfRule:* A *CT_CfRule* element (section 2.6.27) that specifies a conditional formatting rule for this range.  
  
 *xm:sqref:* A *sqref* element (section 2.4.5) that specifies the range this conditional formatting applies to.  
  
 *extLst:* A *CT_ExtensionList* ([ISO/IEC-29500-4] section A.2) element that specifies future extensibility for this element.  
  
 *Attributes:*  
  
 *pivot:* A *Boolean* ([XMLSCHEMA2] section 3.2.2) attribute that specifies whether this conditional formatting is applied only to a PivotTable. MUST be a value from the following table.  
  
|||  
|-|-|  
|*Value*|*Meaning*|  
|*"true"*|*The area specified by sqref only includes cells that are part of a PivotTable data area.*|  
|*"false"*|*The area specified by sqref includes cells that are not part of a PivotTable data area.*|  
  
 The following W3C XML Schema ([XMLSCHEMA1] section 2.1) fragment specifies the contents of this complex type.  
  
 *\<xsd:complexType name="CT_ConditionalFormatting">*  
  
 *\<xsd:sequence>*  
  
 *\<xsd:element name="cfRule" type="CT_CfRule" minOccurs="0" maxOccurs="unbounded"/>*  
  
 *\<xsd:element ref="xm:sqref" minOccurs="0" maxOccurs="1"/>*  
  
 *\<xsd:element name="extLst" minOccurs="0" type="x:CT_ExtensionList"/>*  
  
 *\</xsd:sequence>*  
  
 *\<xsd:attribute name="pivot" type="xsd:boolean" default="false" use="optional"/>*  
  
 *\</xsd:complexType>*  
  
 See section 5.4 for the full W3C XML Schema ([XMLSCHEMA1] section 2.1).  
  
 ]]></format>
    </remarks>
    <remark>
      <para>The following table lists the possible child types:</para>
      <list type="bullet">
        <item>
          <description>ConditionalFormattingRule &lt;x14:cfRule&gt;</description>
        </item>
        <item>
          <description>DocumentFormat.OpenXml.Office.Excel.ReferenceSequence &lt;xne:sqref&gt;</description>
        </item>
        <item>
          <description>ExtensionList &lt;x14:extLst&gt;</description>
        </item>
      </list>
    </remark>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalFormatting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the ConditionalFormatting class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalFormatting (params DocumentFormat.OpenXml.OpenXmlElement[] childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class DocumentFormat.OpenXml.OpenXmlElement[] childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting.#ctor(DocumentFormat.OpenXml.OpenXmlElement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray childElements As OpenXmlElement())" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting : DocumentFormat.OpenXml.OpenXmlElement[] -&gt; DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting" Usage="new DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="DocumentFormat.OpenXml.OpenXmlElement[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>
            Initializes a new instance of the ConditionalFormatting class with the specified child elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalFormatting (System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; childElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class DocumentFormat.OpenXml.OpenXmlElement&gt; childElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting.#ctor(System.Collections.Generic.IEnumerable{DocumentFormat.OpenXml.OpenXmlElement})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childElements As IEnumerable(Of OpenXmlElement))" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting : seq&lt;DocumentFormat.OpenXml.OpenXmlElement&gt; -&gt; DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting" Usage="new DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting childElements" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childElements" Type="System.Collections.Generic.IEnumerable&lt;DocumentFormat.OpenXml.OpenXmlElement&gt;" />
      </Parameters>
      <Docs>
        <param name="childElements">Specifies the child elements.</param>
        <summary>
            Initializes a new instance of the ConditionalFormatting class with the specified child elements.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalFormatting (string outerXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string outerXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerXml As String)" />
      <MemberSignature Language="F#" Value="new DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting : string -&gt; DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting" Usage="new DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting outerXml" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerXml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outerXml">Specifies the outer XML of the element.</param>
        <summary>
            Initializes a new instance of the ConditionalFormatting class from outer XML.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override DocumentFormat.OpenXml.OpenXmlElement CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class DocumentFormat.OpenXml.OpenXmlElement CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As OpenXmlElement" />
      <MemberSignature Language="F#" Value="override this.CloneNode : bool -&gt; DocumentFormat.OpenXml.OpenXmlElement" Usage="conditionalFormatting.CloneNode deep" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.OpenXmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
        <summary>Creates a duplicate of this node.</summary>
        <returns>Returns the cloned node.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Pivot">
      <MemberSignature Language="C#" Value="public DocumentFormat.OpenXml.BooleanValue? Pivot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class DocumentFormat.OpenXml.BooleanValue Pivot" />
      <MemberSignature Language="DocId" Value="P:DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting.Pivot" />
      <MemberSignature Language="VB.NET" Value="Public Property Pivot As BooleanValue" />
      <MemberSignature Language="F#" Value="member this.Pivot : DocumentFormat.OpenXml.BooleanValue with get, set" Usage="DocumentFormat.OpenXml.Office2010.Excel.ConditionalFormatting.Pivot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocumentFormat.OpenXml</AssemblyName>
        <AssemblyVersion>2.7.2.0</AssemblyVersion>
        <AssemblyVersion>2.8.1.0</AssemblyVersion>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
        <AssemblyVersion>2.14.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[DocumentFormat.OpenXml.SchemaAttr(0, "pivot")]</AttributeName>
          <AttributeName Language="F#">[&lt;DocumentFormat.OpenXml.SchemaAttr(0, "pivot")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>DocumentFormat.OpenXml.BooleanValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>pivot, this property is only available in Office 2010 and later.</para>
          <para>Represents the following attribute in the schema: pivot</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
